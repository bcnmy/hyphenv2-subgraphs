// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("receiver", Value.fromBytes(Bytes.empty()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("rewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("rewardAmountPercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("tag", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    return value!.toBigInt();
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get rewardAmountPercent(): BigDecimal {
    let value = this.get("rewardAmountPercent");
    return value!.toBigDecimal();
  }

  set rewardAmountPercent(value: BigDecimal) {
    this.set("rewardAmountPercent", Value.fromBigDecimal(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value!.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }
}

export class HourlyDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set(
      "averageRewardAmountPercent",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyDeposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyDeposit", id.toString(), this);
    }
  }

  static load(id: string): HourlyDeposit | null {
    return changetype<HourlyDeposit | null>(store.get("HourlyDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get averageRewardAmountPercent(): BigDecimal {
    let value = this.get("averageRewardAmountPercent");
    return value!.toBigDecimal();
  }

  set averageRewardAmountPercent(value: BigDecimal) {
    this.set("averageRewardAmountPercent", Value.fromBigDecimal(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class DepositVolumeCumulative extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositVolumeCumulative entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositVolumeCumulative entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositVolumeCumulative", id.toString(), this);
    }
  }

  static load(id: string): DepositVolumeCumulative | null {
    return changetype<DepositVolumeCumulative | null>(
      store.get("DepositVolumeCumulative", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class DepositVolumeCumulativePerChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositVolumeCumulativePerChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositVolumeCumulativePerChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositVolumeCumulativePerChainAndToken", id.toString(), this);
    }
  }

  static load(id: string): DepositVolumeCumulativePerChainAndToken | null {
    return changetype<DepositVolumeCumulativePerChainAndToken | null>(
      store.get("DepositVolumeCumulativePerChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingDepositVolumeForLast24Hour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("deposits", Value.fromStringArray(new Array(0)));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingDepositVolumeForLast24Hour entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingDepositVolumeForLast24Hour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RollingDepositVolumeForLast24Hour", id.toString(), this);
    }
  }

  static load(id: string): RollingDepositVolumeForLast24Hour | null {
    return changetype<RollingDepositVolumeForLast24Hour | null>(
      store.get("RollingDepositVolumeForLast24Hour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingDepositVolumeForLast24HourPerChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("deposits", Value.fromStringArray(new Array(0)));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("firstDeposit", Value.fromString(""));
    this.set("lastDeposit", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingDepositVolumeForLast24HourPerChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingDepositVolumeForLast24HourPerChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set(
        "RollingDepositVolumeForLast24HourPerChainAndToken",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): RollingDepositVolumeForLast24HourPerChainAndToken | null {
    return changetype<RollingDepositVolumeForLast24HourPerChainAndToken | null>(
      store.get("RollingDepositVolumeForLast24HourPerChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get firstDeposit(): string {
    let value = this.get("firstDeposit");
    return value!.toString();
  }

  set firstDeposit(value: string) {
    this.set("firstDeposit", Value.fromString(value));
  }

  get lastDeposit(): string {
    let value = this.get("lastDeposit");
    return value!.toString();
  }

  set lastDeposit(value: string) {
    this.set("lastDeposit", Value.fromString(value));
  }
}

export class HourlyDepositVolumePerChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyDepositVolumePerChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyDepositVolumePerChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyDepositVolumePerChainAndToken", id.toString(), this);
    }
  }

  static load(id: string): HourlyDepositVolumePerChainAndToken | null {
    return changetype<HourlyDepositVolumePerChainAndToken | null>(
      store.get("HourlyDepositVolumePerChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class DailyDepositVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("deposits", Value.fromStringArray(new Array(0)));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyDepositVolume entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyDepositVolume entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyDepositVolume", id.toString(), this);
    }
  }

  static load(id: string): DailyDepositVolume | null {
    return changetype<DailyDepositVolume | null>(
      store.get("DailyDepositVolume", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DailyDepositVolumePerChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumulativeRewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("deposits", Value.fromStringArray(new Array(0)));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyDepositVolumePerChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyDepositVolumePerChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyDepositVolumePerChainAndToken", id.toString(), this);
    }
  }

  static load(id: string): DailyDepositVolumePerChainAndToken | null {
    return changetype<DailyDepositVolumePerChainAndToken | null>(
      store.get("DailyDepositVolumePerChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeRewardAmount(): BigInt {
    let value = this.get("cumulativeRewardAmount");
    return value!.toBigInt();
  }

  set cumulativeRewardAmount(value: BigInt) {
    this.set("cumulativeRewardAmount", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniqueWallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniqueWallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniqueWallet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniqueWallet", id.toString(), this);
    }
  }

  static load(id: string): UniqueWallet | null {
    return changetype<UniqueWallet | null>(store.get("UniqueWallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class UniqueWalletCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniqueWalletCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniqueWalletCount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniqueWalletCount", id.toString(), this);
    }
  }

  static load(id: string): UniqueWalletCount | null {
    return changetype<UniqueWalletCount | null>(
      store.get("UniqueWalletCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class DailyApy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("firstTokenPriceInLPShares", Value.fromBigInt(BigInt.zero()));
    this.set("lastTokenPriceInLPShares", Value.fromBigInt(BigInt.zero()));
    this.set("apy", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyApy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyApy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyApy", id.toString(), this);
    }
  }

  static load(id: string): DailyApy | null {
    return changetype<DailyApy | null>(store.get("DailyApy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get firstTokenPriceInLPShares(): BigInt {
    let value = this.get("firstTokenPriceInLPShares");
    return value!.toBigInt();
  }

  set firstTokenPriceInLPShares(value: BigInt) {
    this.set("firstTokenPriceInLPShares", Value.fromBigInt(value));
  }

  get lastTokenPriceInLPShares(): BigInt {
    let value = this.get("lastTokenPriceInLPShares");
    return value!.toBigInt();
  }

  set lastTokenPriceInLPShares(value: BigInt) {
    this.set("lastTokenPriceInLPShares", Value.fromBigInt(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    return value!.toBigDecimal();
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }
}

export class TokenPriceInLPSharesLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tokenPriceInLPShares", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TokenPriceInLPSharesLog entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenPriceInLPSharesLog entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenPriceInLPSharesLog", id.toString(), this);
    }
  }

  static load(id: string): TokenPriceInLPSharesLog | null {
    return changetype<TokenPriceInLPSharesLog | null>(
      store.get("TokenPriceInLPSharesLog", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenPriceInLPShares(): BigInt {
    let value = this.get("tokenPriceInLPShares");
    return value!.toBigInt();
  }

  set tokenPriceInLPShares(value: BigInt) {
    this.set("tokenPriceInLPShares", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }
}

export class RollingApyFor24Hour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("firstTokenPriceInLPShares", Value.fromBigInt(BigInt.zero()));
    this.set("lastTokenPriceInLPShares", Value.fromBigInt(BigInt.zero()));
    this.set("apy", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("lpLogs", Value.fromStringArray(new Array(0)));
    this.set("firstLog", Value.fromString(""));
    this.set("lastLog", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RollingApyFor24Hour entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingApyFor24Hour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RollingApyFor24Hour", id.toString(), this);
    }
  }

  static load(id: string): RollingApyFor24Hour | null {
    return changetype<RollingApyFor24Hour | null>(
      store.get("RollingApyFor24Hour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get firstTokenPriceInLPShares(): BigInt {
    let value = this.get("firstTokenPriceInLPShares");
    return value!.toBigInt();
  }

  set firstTokenPriceInLPShares(value: BigInt) {
    this.set("firstTokenPriceInLPShares", Value.fromBigInt(value));
  }

  get lastTokenPriceInLPShares(): BigInt {
    let value = this.get("lastTokenPriceInLPShares");
    return value!.toBigInt();
  }

  set lastTokenPriceInLPShares(value: BigInt) {
    this.set("lastTokenPriceInLPShares", Value.fromBigInt(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    return value!.toBigDecimal();
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get lpLogs(): Array<string> {
    let value = this.get("lpLogs");
    return value!.toStringArray();
  }

  set lpLogs(value: Array<string>) {
    this.set("lpLogs", Value.fromStringArray(value));
  }

  get firstLog(): string {
    let value = this.get("firstLog");
    return value!.toString();
  }

  set firstLog(value: string) {
    this.set("firstLog", Value.fromString(value));
  }

  get lastLog(): string {
    let value = this.get("lastLog");
    return value!.toString();
  }

  set lastLog(value: string) {
    this.set("lastLog", Value.fromString(value));
  }
}

export class AssetSentToUserLogEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("receiver", Value.fromBytes(Bytes.empty()));
    this.set("depositHash", Value.fromBytes(Bytes.empty()));
    this.set("fromChainId", Value.fromBigInt(BigInt.zero()));
    this.set("lpFee", Value.fromBigInt(BigInt.zero()));
    this.set("lpFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("transferFee", Value.fromBigInt(BigInt.zero()));
    this.set("transferFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasFee", Value.fromBigInt(BigInt.zero()));
    this.set("gasFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AssetSentToUserLogEntry entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AssetSentToUserLogEntry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AssetSentToUserLogEntry", id.toString(), this);
    }
  }

  static load(id: string): AssetSentToUserLogEntry | null {
    return changetype<AssetSentToUserLogEntry | null>(
      store.get("AssetSentToUserLogEntry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transferredAmount(): BigInt {
    let value = this.get("transferredAmount");
    return value!.toBigInt();
  }

  set transferredAmount(value: BigInt) {
    this.set("transferredAmount", Value.fromBigInt(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get depositHash(): Bytes {
    let value = this.get("depositHash");
    return value!.toBytes();
  }

  set depositHash(value: Bytes) {
    this.set("depositHash", Value.fromBytes(value));
  }

  get fromChainId(): BigInt {
    let value = this.get("fromChainId");
    return value!.toBigInt();
  }

  set fromChainId(value: BigInt) {
    this.set("fromChainId", Value.fromBigInt(value));
  }

  get lpFee(): BigInt {
    let value = this.get("lpFee");
    return value!.toBigInt();
  }

  set lpFee(value: BigInt) {
    this.set("lpFee", Value.fromBigInt(value));
  }

  get lpFeePercent(): BigDecimal {
    let value = this.get("lpFeePercent");
    return value!.toBigDecimal();
  }

  set lpFeePercent(value: BigDecimal) {
    this.set("lpFeePercent", Value.fromBigDecimal(value));
  }

  get transferFee(): BigInt {
    let value = this.get("transferFee");
    return value!.toBigInt();
  }

  set transferFee(value: BigInt) {
    this.set("transferFee", Value.fromBigInt(value));
  }

  get transferFeePercent(): BigDecimal {
    let value = this.get("transferFeePercent");
    return value!.toBigDecimal();
  }

  set transferFeePercent(value: BigDecimal) {
    this.set("transferFeePercent", Value.fromBigDecimal(value));
  }

  get gasFee(): BigInt {
    let value = this.get("gasFee");
    return value!.toBigInt();
  }

  set gasFee(value: BigInt) {
    this.set("gasFee", Value.fromBigInt(value));
  }

  get gasFeePercent(): BigDecimal {
    let value = this.get("gasFeePercent");
    return value!.toBigDecimal();
  }

  set gasFeePercent(value: BigDecimal) {
    this.set("gasFeePercent", Value.fromBigDecimal(value));
  }
}

export class HourlyAssetSent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("fromChainId", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeTransferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeLpFee", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeTransferFee", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeGasFee", Value.fromBigInt(BigInt.zero()));
    this.set("averageLpFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "averageTransferFeePercent",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("averageGasFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyAssetSent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyAssetSent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyAssetSent", id.toString(), this);
    }
  }

  static load(id: string): HourlyAssetSent | null {
    return changetype<HourlyAssetSent | null>(store.get("HourlyAssetSent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get fromChainId(): BigInt {
    let value = this.get("fromChainId");
    return value!.toBigInt();
  }

  set fromChainId(value: BigInt) {
    this.set("fromChainId", Value.fromBigInt(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get cumulativeTransferredAmount(): BigInt {
    let value = this.get("cumulativeTransferredAmount");
    return value!.toBigInt();
  }

  set cumulativeTransferredAmount(value: BigInt) {
    this.set("cumulativeTransferredAmount", Value.fromBigInt(value));
  }

  get cumulativeLpFee(): BigInt {
    let value = this.get("cumulativeLpFee");
    return value!.toBigInt();
  }

  set cumulativeLpFee(value: BigInt) {
    this.set("cumulativeLpFee", Value.fromBigInt(value));
  }

  get cumulativeTransferFee(): BigInt {
    let value = this.get("cumulativeTransferFee");
    return value!.toBigInt();
  }

  set cumulativeTransferFee(value: BigInt) {
    this.set("cumulativeTransferFee", Value.fromBigInt(value));
  }

  get cumulativeGasFee(): BigInt {
    let value = this.get("cumulativeGasFee");
    return value!.toBigInt();
  }

  set cumulativeGasFee(value: BigInt) {
    this.set("cumulativeGasFee", Value.fromBigInt(value));
  }

  get averageLpFeePercent(): BigDecimal {
    let value = this.get("averageLpFeePercent");
    return value!.toBigDecimal();
  }

  set averageLpFeePercent(value: BigDecimal) {
    this.set("averageLpFeePercent", Value.fromBigDecimal(value));
  }

  get averageTransferFeePercent(): BigDecimal {
    let value = this.get("averageTransferFeePercent");
    return value!.toBigDecimal();
  }

  set averageTransferFeePercent(value: BigDecimal) {
    this.set("averageTransferFeePercent", Value.fromBigDecimal(value));
  }

  get averageGasFeePercent(): BigDecimal {
    let value = this.get("averageGasFeePercent");
    return value!.toBigDecimal();
  }

  set averageGasFeePercent(value: BigDecimal) {
    this.set("averageGasFeePercent", Value.fromBigDecimal(value));
  }
}

export class DailyAssetSentPerFromChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeTransferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("fromChainId", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeLpFee", Value.fromBigInt(BigInt.zero()));
    this.set("averageLpFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cumulativeTransferFee", Value.fromBigInt(BigInt.zero()));
    this.set(
      "averageTransferFeePercent",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeGasFee", Value.fromBigInt(BigInt.zero()));
    this.set("averageGasFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyAssetSentPerFromChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyAssetSentPerFromChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyAssetSentPerFromChainAndToken", id.toString(), this);
    }
  }

  static load(id: string): DailyAssetSentPerFromChainAndToken | null {
    return changetype<DailyAssetSentPerFromChainAndToken | null>(
      store.get("DailyAssetSentPerFromChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get cumulativeTransferredAmount(): BigInt {
    let value = this.get("cumulativeTransferredAmount");
    return value!.toBigInt();
  }

  set cumulativeTransferredAmount(value: BigInt) {
    this.set("cumulativeTransferredAmount", Value.fromBigInt(value));
  }

  get fromChainId(): BigInt {
    let value = this.get("fromChainId");
    return value!.toBigInt();
  }

  set fromChainId(value: BigInt) {
    this.set("fromChainId", Value.fromBigInt(value));
  }

  get cumulativeLpFee(): BigInt {
    let value = this.get("cumulativeLpFee");
    return value!.toBigInt();
  }

  set cumulativeLpFee(value: BigInt) {
    this.set("cumulativeLpFee", Value.fromBigInt(value));
  }

  get averageLpFeePercent(): BigDecimal {
    let value = this.get("averageLpFeePercent");
    return value!.toBigDecimal();
  }

  set averageLpFeePercent(value: BigDecimal) {
    this.set("averageLpFeePercent", Value.fromBigDecimal(value));
  }

  get cumulativeTransferFee(): BigInt {
    let value = this.get("cumulativeTransferFee");
    return value!.toBigInt();
  }

  set cumulativeTransferFee(value: BigInt) {
    this.set("cumulativeTransferFee", Value.fromBigInt(value));
  }

  get averageTransferFeePercent(): BigDecimal {
    let value = this.get("averageTransferFeePercent");
    return value!.toBigDecimal();
  }

  set averageTransferFeePercent(value: BigDecimal) {
    this.set("averageTransferFeePercent", Value.fromBigDecimal(value));
  }

  get cumulativeGasFee(): BigInt {
    let value = this.get("cumulativeGasFee");
    return value!.toBigInt();
  }

  set cumulativeGasFee(value: BigInt) {
    this.set("cumulativeGasFee", Value.fromBigInt(value));
  }

  get averageGasFeePercent(): BigDecimal {
    let value = this.get("averageGasFeePercent");
    return value!.toBigDecimal();
  }

  set averageGasFeePercent(value: BigDecimal) {
    this.set("averageGasFeePercent", Value.fromBigDecimal(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingAssetSentForLast24HoursPerChainAndToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("cumulativeAmount", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeTransferredAmount", Value.fromBigInt(BigInt.zero()));
    this.set("depositHash", Value.fromBytes(Bytes.empty()));
    this.set("fromChainId", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeLpFee", Value.fromBigInt(BigInt.zero()));
    this.set("averageLpFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cumulativeTransferFee", Value.fromBigInt(BigInt.zero()));
    this.set(
      "averageTransferFeePercent",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeGasFee", Value.fromBigInt(BigInt.zero()));
    this.set("averageGasFeePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("assetSentLogs", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingAssetSentForLast24HoursPerChainAndToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingAssetSentForLast24HoursPerChainAndToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set(
        "RollingAssetSentForLast24HoursPerChainAndToken",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): RollingAssetSentForLast24HoursPerChainAndToken | null {
    return changetype<RollingAssetSentForLast24HoursPerChainAndToken | null>(
      store.get("RollingAssetSentForLast24HoursPerChainAndToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get cumulativeAmount(): BigInt {
    let value = this.get("cumulativeAmount");
    return value!.toBigInt();
  }

  set cumulativeAmount(value: BigInt) {
    this.set("cumulativeAmount", Value.fromBigInt(value));
  }

  get cumulativeTransferredAmount(): BigInt {
    let value = this.get("cumulativeTransferredAmount");
    return value!.toBigInt();
  }

  set cumulativeTransferredAmount(value: BigInt) {
    this.set("cumulativeTransferredAmount", Value.fromBigInt(value));
  }

  get depositHash(): Bytes {
    let value = this.get("depositHash");
    return value!.toBytes();
  }

  set depositHash(value: Bytes) {
    this.set("depositHash", Value.fromBytes(value));
  }

  get fromChainId(): BigInt {
    let value = this.get("fromChainId");
    return value!.toBigInt();
  }

  set fromChainId(value: BigInt) {
    this.set("fromChainId", Value.fromBigInt(value));
  }

  get cumulativeLpFee(): BigInt {
    let value = this.get("cumulativeLpFee");
    return value!.toBigInt();
  }

  set cumulativeLpFee(value: BigInt) {
    this.set("cumulativeLpFee", Value.fromBigInt(value));
  }

  get averageLpFeePercent(): BigDecimal {
    let value = this.get("averageLpFeePercent");
    return value!.toBigDecimal();
  }

  set averageLpFeePercent(value: BigDecimal) {
    this.set("averageLpFeePercent", Value.fromBigDecimal(value));
  }

  get cumulativeTransferFee(): BigInt {
    let value = this.get("cumulativeTransferFee");
    return value!.toBigInt();
  }

  set cumulativeTransferFee(value: BigInt) {
    this.set("cumulativeTransferFee", Value.fromBigInt(value));
  }

  get averageTransferFeePercent(): BigDecimal {
    let value = this.get("averageTransferFeePercent");
    return value!.toBigDecimal();
  }

  set averageTransferFeePercent(value: BigDecimal) {
    this.set("averageTransferFeePercent", Value.fromBigDecimal(value));
  }

  get cumulativeGasFee(): BigInt {
    let value = this.get("cumulativeGasFee");
    return value!.toBigInt();
  }

  set cumulativeGasFee(value: BigInt) {
    this.set("cumulativeGasFee", Value.fromBigInt(value));
  }

  get averageGasFeePercent(): BigDecimal {
    let value = this.get("averageGasFeePercent");
    return value!.toBigDecimal();
  }

  set averageGasFeePercent(value: BigDecimal) {
    this.set("averageGasFeePercent", Value.fromBigDecimal(value));
  }

  get assetSentLogs(): Array<string> {
    let value = this.get("assetSentLogs");
    return value!.toStringArray();
  }

  set assetSentLogs(value: Array<string>) {
    this.set("assetSentLogs", Value.fromStringArray(value));
  }
}

export class SuppliedLiquidityLogEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("suppliedLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SuppliedLiquidityLogEntry entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SuppliedLiquidityLogEntry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SuppliedLiquidityLogEntry", id.toString(), this);
    }
  }

  static load(id: string): SuppliedLiquidityLogEntry | null {
    return changetype<SuppliedLiquidityLogEntry | null>(
      store.get("SuppliedLiquidityLogEntry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get suppliedLiquidity(): BigInt {
    let value = this.get("suppliedLiquidity");
    return value!.toBigInt();
  }

  set suppliedLiquidity(value: BigInt) {
    this.set("suppliedLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }
}

export class HourlySuppliedLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("suppliedLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlySuppliedLiquidity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlySuppliedLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlySuppliedLiquidity", id.toString(), this);
    }
  }

  static load(id: string): HourlySuppliedLiquidity | null {
    return changetype<HourlySuppliedLiquidity | null>(
      store.get("HourlySuppliedLiquidity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get suppliedLiquidity(): BigInt {
    let value = this.get("suppliedLiquidity");
    return value!.toBigInt();
  }

  set suppliedLiquidity(value: BigInt) {
    this.set("suppliedLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingSuppliedLiquidityForLast24Hour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("suppliedLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("logs", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingSuppliedLiquidityForLast24Hour entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingSuppliedLiquidityForLast24Hour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RollingSuppliedLiquidityForLast24Hour", id.toString(), this);
    }
  }

  static load(id: string): RollingSuppliedLiquidityForLast24Hour | null {
    return changetype<RollingSuppliedLiquidityForLast24Hour | null>(
      store.get("RollingSuppliedLiquidityForLast24Hour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get suppliedLiquidity(): BigInt {
    let value = this.get("suppliedLiquidity");
    return value!.toBigInt();
  }

  set suppliedLiquidity(value: BigInt) {
    this.set("suppliedLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }

  set logs(value: Array<string>) {
    this.set("logs", Value.fromStringArray(value));
  }
}

export class AvailableLiquidityLogEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("availableLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AvailableLiquidityLogEntry entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AvailableLiquidityLogEntry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AvailableLiquidityLogEntry", id.toString(), this);
    }
  }

  static load(id: string): AvailableLiquidityLogEntry | null {
    return changetype<AvailableLiquidityLogEntry | null>(
      store.get("AvailableLiquidityLogEntry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    return value!.toBigInt();
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }
}

export class HourlyAvailableLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("availableLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyAvailableLiquidity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyAvailableLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyAvailableLiquidity", id.toString(), this);
    }
  }

  static load(id: string): HourlyAvailableLiquidity | null {
    return changetype<HourlyAvailableLiquidity | null>(
      store.get("HourlyAvailableLiquidity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    return value!.toBigInt();
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingAvailableLiquidityForLast24Hour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("availableLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("logs", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingAvailableLiquidityForLast24Hour entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingAvailableLiquidityForLast24Hour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RollingAvailableLiquidityForLast24Hour", id.toString(), this);
    }
  }

  static load(id: string): RollingAvailableLiquidityForLast24Hour | null {
    return changetype<RollingAvailableLiquidityForLast24Hour | null>(
      store.get("RollingAvailableLiquidityForLast24Hour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    return value!.toBigInt();
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }

  set logs(value: Array<string>) {
    this.set("logs", Value.fromStringArray(value));
  }
}

export class IncentivePoolBalanceLogEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("poolBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save IncentivePoolBalanceLogEntry entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save IncentivePoolBalanceLogEntry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("IncentivePoolBalanceLogEntry", id.toString(), this);
    }
  }

  static load(id: string): IncentivePoolBalanceLogEntry | null {
    return changetype<IncentivePoolBalanceLogEntry | null>(
      store.get("IncentivePoolBalanceLogEntry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolBalance(): BigInt {
    let value = this.get("poolBalance");
    return value!.toBigInt();
  }

  set poolBalance(value: BigInt) {
    this.set("poolBalance", Value.fromBigInt(value));
  }
}

export class HourlyIncentivePoolBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("poolBalance", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyIncentivePoolBalance entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyIncentivePoolBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyIncentivePoolBalance", id.toString(), this);
    }
  }

  static load(id: string): HourlyIncentivePoolBalance | null {
    return changetype<HourlyIncentivePoolBalance | null>(
      store.get("HourlyIncentivePoolBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get poolBalance(): BigInt {
    let value = this.get("poolBalance");
    return value!.toBigInt();
  }

  set poolBalance(value: BigInt) {
    this.set("poolBalance", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class RollingIncentivePoolBalanceForLast24Hour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("poolBalance", Value.fromBigInt(BigInt.zero()));
    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("logs", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollingIncentivePoolBalanceForLast24Hour entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RollingIncentivePoolBalanceForLast24Hour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set(
        "RollingIncentivePoolBalanceForLast24Hour",
        id.toString(),
        this
      );
    }
  }

  static load(id: string): RollingIncentivePoolBalanceForLast24Hour | null {
    return changetype<RollingIncentivePoolBalanceForLast24Hour | null>(
      store.get("RollingIncentivePoolBalanceForLast24Hour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get poolBalance(): BigInt {
    let value = this.get("poolBalance");
    return value!.toBigInt();
  }

  set poolBalance(value: BigInt) {
    this.set("poolBalance", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }

  set logs(value: Array<string>) {
    this.set("logs", Value.fromStringArray(value));
  }
}

export class DepositAndSwap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("receiver", Value.fromBytes(Bytes.empty()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("toChainID", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("rewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("rewardAmountPercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tag", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositAndSwap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositAndSwap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositAndSwap", id.toString(), this);
    }
  }

  static load(id: string): DepositAndSwap | null {
    return changetype<DepositAndSwap | null>(store.get("DepositAndSwap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    return value!.toBigInt();
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get rewardAmountPercent(): BigDecimal {
    let value = this.get("rewardAmountPercent");
    return value!.toBigDecimal();
  }

  set rewardAmountPercent(value: BigDecimal) {
    this.set("rewardAmountPercent", Value.fromBigDecimal(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value!.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SwapRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("percentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("path", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SwapRequest entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SwapRequest", id.toString(), this);
    }
  }

  static load(id: string): SwapRequest | null {
    return changetype<SwapRequest | null>(store.get("SwapRequest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get percentage(): BigDecimal {
    let value = this.get("percentage");
    return value!.toBigDecimal();
  }

  set percentage(value: BigDecimal) {
    this.set("percentage", Value.fromBigDecimal(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get path(): Bytes {
    let value = this.get("path");
    return value!.toBytes();
  }

  set path(value: Bytes) {
    this.set("path", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
