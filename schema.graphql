# lpFee is equal to transferFeeAmount when transferFeePercent < equilibriumFee
# when transferFeePercent > equilibriumFee, lpFee is capped, and exceeding portion of
# transferFeeAmount goes to Arbitragers in the form of Incentive Pool
type FeeDetailLogEntry @entity {
  id: ID!
  lpFee: BigInt!
  transferFee: BigInt!
  gasFee: BigInt!
  timestamp: BigInt!
  rollingWindow: RollingFeeDetailsLogsForLast24Hour
  dailyWindow: DailyFeeDetailsLog!
}

type FeeCumulative @entity {
  id: ID!
  lpFee: BigInt!
  transferFee: BigInt!
  gasFee: BigInt!
  count: BigInt!
}

type RollingFeeDetailsLogsForLast24Hour @entity {
  id: ID!
  cumulativeLpFee: BigInt!
  cumulativeTransferFee: BigInt!
  cumulativeGasFee: BigInt!
  logs: [FeeDetailLogEntry!] @derivedFrom(field: "rollingWindow")
  count: BigInt!
}

type DailyFeeDetailsLog @entity {
  id: ID!
  cumulativeLpFee: BigInt!
  cumulativeTransferFee: BigInt!
  cumulativeGasFee: BigInt!
  logs: [FeeDetailLogEntry!] @derivedFrom(field: "dailyWindow")
  count: BigInt!
  timestamp: BigInt!
}

type Deposit @entity {
  id: ID!
  sender: Bytes!
  tokenAddress: Bytes!
  timestamp: BigInt!
  receiver: Bytes!
  toChainID: BigInt!
  rewardAmount: BigInt!
  amount: BigInt!
  tag: String!
  rollingWindow: RollingDepositVolumeForLast24Hour
  rollingWindowPerChainAndToken: RollingDepositVolumeForLast24HourPerChainAndToken
  dailyWindow: DailyDepositVolume!
  dailyWindowPerChainAndToken: DailyDepositVolumePerChainAndToken!
}

type DepositVolumeCumulative @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  count: BigInt!
}

type DepositVolumeCumulativePerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  toChainID: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingDepositVolumeForLast24Hour @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [Deposit!] @derivedFrom(field: "rollingWindow")
  count: BigInt!
}

type RollingDepositVolumeForLast24HourPerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [Deposit!] @derivedFrom(field: "rollingWindowPerChainAndToken")
  tokenAddress: Bytes!
  toChainID: BigInt!
  count: BigInt!
}

type DailyDepositVolume @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [Deposit!]! @derivedFrom(field: "dailyWindow")
  count: BigInt!
  timestamp: BigInt!
}

type DailyDepositVolumePerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [Deposit!]! @derivedFrom(field: "dailyWindowPerChainAndToken")
  toChainID: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  timestamp: BigInt!
}

type UniqueWallet @entity {
  id: ID!
  count: BigInt!
}

type UniqueWalletCount @entity {
  id: ID!
  count: BigInt!
}

type DailyApy @entity {
  id: ID!
  timestamp: BigInt!
  firstTokenPriceInLPShares: BigInt!
  lastTokenPriceInLPShares: BigInt!
  apy: BigDecimal!
  tokenAddress: Bytes!
}

type TokenPriceInLPSharesLog @entity {
  id: ID!
  timestamp: BigInt!
  tokenPriceInLPShares: BigInt!
  tokenAddress: Bytes!
  rollingApyWindow: RollingApyFor24Hour
}

type RollingApyFor24Hour @entity {
  id: ID!
  firstTokenPriceInLPShares: BigInt!
  lastTokenPriceInLPShares: BigInt!
  apy: BigDecimal!
  tokenAddress: Bytes!
  lpLogs: [TokenPriceInLPSharesLog!] @derivedFrom(field: "rollingApyWindow")
}

type AssetSentToUserLogEntry @entity {
  id: ID!
  tokenAddress: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  transferredAmount: BigInt!
  receiver: Bytes!
  depositHash: Bytes!
  fromChainId: BigInt!
}

type SuppliedLiquidityLogEntry @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
  suppliedLiquidityRollingWindow: RollingSuppliedLiquidityForLast24Hour
}

type HourlySuppliedLiquidity @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingSuppliedLiquidityForLast24Hour @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  logs: [SuppliedLiquidityLogEntry!] @derivedFrom(field: "suppliedLiquidityRollingWindow")
  }

type AvailableLiquidityLogEntry @entity {
  id: ID!
  timestamp: BigInt!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
  availableLiquidityRollingWindow: RollingAvailableLiquidityForLast24Hour
}

type HourlyAvailableLiquidity @entity {
  id: ID!
  timestamp: BigInt!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingAvailableLiquidityForLast24Hour @entity {
  id: ID!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  logs: [AvailableLiquidityLogEntry!]
    @derivedFrom(field: "availableLiquidityRollingWindow")
}
