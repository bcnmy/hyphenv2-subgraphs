# lpFee is equal to transferFeeAmount when transferFeePercent < equilibriumFee
# when transferFeePercent > equilibriumFee, lpFee is capped, and exceeding portion of
# transferFeeAmount goes to Arbitragers in the form of Incentive Pool
# type FeeCumulative @entity {
#   id: ID!
#   lpFee: BigInt!
#   transferFee: BigInt!
#   gasFee: BigInt!
#   count: BigInt!
#   tokenAddress: Bytes!
# }

# type RollingFeeDetailsLogsForLast24Hour @entity {
#   id: ID!
#   cumulativeLpFee: BigInt!
#   cumulativeTransferFee: BigInt!
#   cumulativeGasFee: BigInt!
#   logs: [String!]!
#   count: BigInt!
#   tokenAddress: Bytes!
# }

# type DailyFeeDetailsLog @entity {
#   id: ID!
#   cumulativeLpFee: BigInt!
#   cumulativeTransferFee: BigInt!
#   cumulativeGasFee: BigInt!
#   count: BigInt!
#   timestamp: BigInt!
#   tokenAddress: Bytes!
# }

type Deposit @entity {
  id: ID!
  sender: Bytes!
  tokenAddress: Bytes!
  timestamp: BigInt!
  receiver: Bytes!
  toChainID: BigInt!
  rewardAmount: BigInt!
  rewardAmountPercent: BigDecimal!
  amount: BigInt!
  tag: String!
}

type HourlyDeposit @entity {
  id: ID!
  tokenAddress: Bytes!
  timestamp: BigInt!
  toChainID: BigInt!
  cumulativeRewardAmount: BigInt!
  averageRewardAmountPercent: BigDecimal!
  cumulativeAmount: BigInt!
  count: BigInt!
}

type DepositVolumeCumulative @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  count: BigInt!
}

type DepositVolumeCumulativePerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  toChainID: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingDepositVolumeForLast24Hour @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [String!]!
  count: BigInt!
}

type RollingDepositVolumeForLast24HourPerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [String!]!
  tokenAddress: Bytes!
  toChainID: BigInt!
  count: BigInt!
  firstDeposit: String!
  lastDeposit: String!
}

type HourlyDepositVolumePerChainAndToken @entity {
  id: ID!
  timestamp: BigInt!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  tokenAddress: Bytes!
  toChainID: BigInt!
  count: BigInt!
}

type DailyDepositVolume @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [String!]!
  count: BigInt!
  timestamp: BigInt!
}

type DailyDepositVolumePerChainAndToken @entity {
  id: ID!
  cumulativeRewardAmount: BigInt!
  cumulativeAmount: BigInt!
  deposits: [String!]!
  toChainID: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  timestamp: BigInt!
}

type UniqueWallet @entity {
  id: ID!
  count: BigInt!
}

type UniqueWalletCount @entity {
  id: ID!
  count: BigInt!
}

type DailyApy @entity {
  id: ID!
  timestamp: BigInt!
  firstTokenPriceInLPShares: BigInt!
  lastTokenPriceInLPShares: BigInt!
  apy: BigDecimal!
  tokenAddress: Bytes!
}

type TokenPriceInLPSharesLog @entity {
  id: ID!
  timestamp: BigInt!
  tokenPriceInLPShares: BigInt!
  tokenAddress: Bytes!
}

type RollingApyFor24Hour @entity {
  id: ID!
  firstTokenPriceInLPShares: BigInt!
  lastTokenPriceInLPShares: BigInt!
  apy: BigDecimal!
  tokenAddress: Bytes!
  lpLogs: [String!]!
  firstLog: String!
  lastLog: String!
}

type AssetSentToUserLogEntry @entity {
  id: ID!
  tokenAddress: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  transferredAmount: BigInt!
  receiver: Bytes!
  depositHash: Bytes!
  fromChainId: BigInt!
  lpFee: BigInt!
  lpFeePercent: BigDecimal!
  transferFee: BigInt!
  transferFeePercent: BigDecimal!
  gasFee: BigInt!
  gasFeePercent: BigDecimal!
}

type HourlyAssetSent @entity {
  id: ID!
  count: BigInt!
  timestamp: BigInt!
  tokenAddress: Bytes!
  fromChainId: BigInt!
  cumulativeAmount: BigInt!
  cumulativeTransferredAmount: BigInt!

  cumulativeLpFee: BigInt!
  cumulativeTransferFee: BigInt!
  cumulativeGasFee: BigInt!

  averageLpFeePercent: BigDecimal!
  averageTransferFeePercent: BigDecimal!
  averageGasFeePercent: BigDecimal!
}

type DailyAssetSentPerFromChainAndToken @entity {
  id: ID!
  timestamp: BigInt!
  tokenAddress: Bytes!
  cumulativeAmount: BigInt!
  cumulativeTransferredAmount: BigInt!
  fromChainId: BigInt!
  cumulativeLpFee: BigInt!
  averageLpFeePercent: BigDecimal!
  cumulativeTransferFee: BigInt!
  averageTransferFeePercent: BigDecimal!
  cumulativeGasFee: BigInt!
  averageGasFeePercent: BigDecimal!
  count: BigInt!
}

type RollingAssetSentForLast24HoursPerChainAndToken @entity {
  id: ID!
  count: BigInt!
  tokenAddress: Bytes!
  cumulativeAmount: BigInt!
  cumulativeTransferredAmount: BigInt!
  depositHash: Bytes!
  fromChainId: BigInt!
  cumulativeLpFee: BigInt!
  averageLpFeePercent: BigDecimal!
  cumulativeTransferFee: BigInt!
  averageTransferFeePercent: BigDecimal!
  cumulativeGasFee: BigInt!
  averageGasFeePercent: BigDecimal!
  assetSentLogs: [String!]!
}

type SuppliedLiquidityLogEntry @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
}

type HourlySuppliedLiquidity @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingSuppliedLiquidityForLast24Hour @entity {
  id: ID!
  timestamp: BigInt!
  suppliedLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  logs: [String!]!
}

type AvailableLiquidityLogEntry @entity {
  id: ID!
  timestamp: BigInt!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
}

type HourlyAvailableLiquidity @entity {
  id: ID!
  timestamp: BigInt!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
}

type RollingAvailableLiquidityForLast24Hour @entity {
  id: ID!
  availableLiquidity: BigInt!
  tokenAddress: Bytes!
  count: BigInt!
  logs: [String!]!
}

type IncentivePoolBalanceLogEntry @entity {
  id: ID!
  tokenAddress: Bytes!
  timestamp: BigInt!
  poolBalance: BigInt!
}
type HourlyIncentivePoolBalance @entity {
  id: ID!
  timestamp: BigInt!
  tokenAddress: Bytes!
  poolBalance: BigInt!
  count: BigInt!
}

type RollingIncentivePoolBalanceForLast24Hour @entity {
  id: ID!
  tokenAddress: Bytes!
  poolBalance: BigInt!
  count: BigInt!
  logs: [String!]!
}

type DepositAndSwap @entity {
  id: ID!
  sender: Bytes!
  receiver: Bytes!
  tokenAddress: Bytes!
  toChainID: BigInt!
  amount: BigInt!
  rewardAmount: BigInt!
  rewardAmountPercent: BigDecimal!
  tag: String!
  timestamp: BigInt!
}

# type SwapRequest @entity {
#   id: ID!
#   tokenAddress: Bytes!
#   percentage: BigDecimal!
#   amount: BigInt!
#   path: Bytes!
#   timestamp: BigInt!
# }